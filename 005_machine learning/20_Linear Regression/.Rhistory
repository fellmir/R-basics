df <- read.csv("student-mat.csv")
library(dplyr)
head(df)
df <- read.csv("student-mat.csv", sep = ";")
head(df)
summary(df)
any(is.na(df))
str(df)
library(ggplot2)
library(ggthemes)
num.cols <- df %>%
sapply(is.numeric)
cor.data <- num.cols %>%
cor()
print(cor.data)
num.cols <- df %>%
sapply(is.numeric)
cor.data <- cor(df[,num.cols])
print(cor.data)
install.packages("corrgram")
library(corrgram)
install.packages("corrplot")
cor.data %>%
corrplot(method = "color")
library(corrplot)
cor.data %>%
corrplot(method = "color")
df %>%
corrgram(order = T, lower.panel = panel.shade, upper.panel = panel.pie,
text.panel=panel.txt)
color.plot <- cor.data %>%
corrplot(method = "color")
cor.smosgard <- df %>%
corrgram(order = T, lower.panel = panel.shade, upper.panel = panel.pie,
text.panel=panel.txt)
G3.histogram <- df %>%
ggplot(aes(x = G3)) + geom_histogram(bins = 20, alpha = 0.4, fill = "blue") +
theme_minimal()
G3.histogram
library(caTools)
install.packages("caTools")
library(caTools)
sample <- df$age %>%
sample.split(SplitRatio = 0.7)
sample
train = subset(df, sample == T)
test = subset(df, sample == F)
set.seed(101) # seed for sampling, similar to Stata
sample <- df$age %>%
sample.split(SplitRatio = 0.7) # SplitRatio <- percentage of OG sample which
# is true and not random
train = subset(df, sample == T)
test = subset(df, sample == F)
df
sample
set.seed(101) # seed for sampling, similar to Stata
sample <- df$age %>%
sample.split(SplitRatio = 0.7) # SplitRatio <- percentage of OG sample which
# is true and not random, used for training data
train <- subset(df, sample == T) # 70% used for training
test <- subset(df, sample == F) # 30% used for testing
df
help(lm)
model <- lm(G3 ~ .,train) # (formula, data)
summary(model)
res <- residuals(model) # grabbing residuals
res <- as.data.frame(res) # converting to data frame for ggplot2
head(res)
help("sample.split")
res.histogram <- res %>%
ggplot(aes(res)) + geom_histogram(bins = 20, fill = "blue", alpha = 0.4)
res.histogram
plot(model)
G3.predictions <- predict(model,test)
G3.predictions
G3.predictions <- model %>%
predict(test)
results <- G3.predictions %>%
cbind(test$G3)
# from the "test" sample
colnames(results) <- c("pred", "real")
results <- as.data.frame(results)
results
test
head(results)
head(test)
# ggplot2
results
results <- G3.predictions %>%
cbind(test$G3) # creating a new object with predicted and real values of G3,
# with predicted values coming from the "test" sample
colnames(results) <- c("pred", "real") # adding names to the new object
results <- as.data.frame(results) # turning the object into a data frame for
# ggplot2
results
to_zero <- function(x){
if  (x < 0){
return(0)
}else{
return(x)
}
}
# (prediction interval)
results$pred <- sapply(results$pred,to_zero)
results
mse <- mean((results$real - results$pred) ^ 2)
mse
rmse <- mse ^ 0.5
rmse
SSE <- sum((results$pred - results$real)^2) # sum of square of errors
SST <- sum((mean(df$G3) - results$real)^2) # total square sum
R2 <- 1 - (SSE/SST)
R2
