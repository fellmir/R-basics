library(ISLR)
head(College)
data("College")
df <- data.frame(College)
head(df)
library(ggplot2)
library(dplyr)
grad.v.board <- df %>%
ggplot(aes(x = Room.Board, y = Grad.Rate)) +
geom_point(aes(color = factor(Private)))
grad.v.board
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(color = factor(Private))
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(aes(color = factor(Private)))
ft.grads
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(binwidth = 5, aes(color = factor(Private)))
ft.grads
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(binwidth = 20, aes(color = factor(Private)))
ft.grads
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(binwidth = 50, aes(color = factor(Private)))
ft.grads
# or:
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(aes(fill = factor(Private), color = "black", bins = 50))
# or:
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(aes(fill = factor(Private), color = "black"), bins = 50)
ft.grads
50
# or:
ft.grads <- df %>%
ggplot(aes(x = F.Undergrad)) +
geom_histogram(aes(fill = factor(Private)), color = "black", bins = 50)
ft.grads
graduate.rate <- df %>%
ggplot(aes(x = Grad.Rate)) +
geom_histogram(aes(fill = factor(Private)), color = "black")
graduate.rate
graduate.rate <- df %>%
ggplot(aes(x = Grad.Rate)) +
geom_histogram(aes(fill = factor(Private)), color = "black", bins = 50)
graduate.rate
ft.grads
subset(df,Grad.Rate > 100)
df['Cazenovia College','Grad.Rate'] <- 100
df["Cazenovia College",]
library(caTools)
set.seed(101)
sampling <- sample.split(df$Private, SplitRatio = .70)
training.data <- subset(df, sampling = T)
testing.data <- subset(df, sampling = F)
library(rpart)
tree <- rpart(Private ~ ., data = training.data, method = "class")
help("predict")
predict(tree)
predicted.results <- predict(tree)
predicted.testing <- predict(tree, testing.data)
head(predicted.testing)
set.seed(101)
sampling <- sample.split(df$Private, SplitRatio = .70)
training.data <- subset(df, sampling == T)
testing.data <- subset(df, sampling == F)
tree <- rpart(Private ~ ., data = training.data, method = "class")
help("predict")
predicted.testing <- predict(tree, testing.data)
head(predicted.testing)
tree.prediction <- as.data.frame(predicted.testing)
combining <- function(x){
if(x >= 0.5){
return("Yes")
}else{
return("No")
}
}
tree.prediction$Private <- sapply(tree.prediction$Yes, combining)
head(tree.prediction)
table(tree.prediction$Private, testing.data$Private)
library(rpart.plot)
prp(tree.prediction)
prp(tree)
library(randomForest)
help("randomForest")
model <- randomForest(Private ~ ., data = training.data, importance = T)
model$confusion
model$importance
order(model$importance)
order(model$importance[,4])
model$importance[,4]
order(model$importance[,4])
help("order")
pred <- predict(model, testing.data)
pred
table(pred, testing.data$Private)
