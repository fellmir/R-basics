df.train <- read.csv("titanic_train.csv")
head(df.train)
install.packages("Amelia")
library(dplyr)
library(ggplot2)
library(Amelia)
miss.map <- df.train %>%
missmap(main = "Titanic Training Data - Missings Map", col = c("yellow",
"black"), legend = F)
miss.map
df.train %>%
missmap(main = "Titanic Training Data - Missings Map", col = c("yellow",
"black"), legend = F)
rm(miss.map)
df.train %>%
missmap(main = "Titanic Training Data - Missings Map", col = c("yellow",
"black"), legend = F)
survival.count <- df.train %>%
ggplot(aes(Survived)) + geom_bar()
survival.count
Pclass.count <- df.train %>%
ggplot(aes(Pclass)) %>%
geom_bar(aes(fill = factor(Pclass)), alpha = 0.4)
Pclass.count <- df.train %>%
ggplot(aes(Pclass)) + geom_bar(aes(fill = factor(Pclass)), alpha = 0.4)
Pclass.count
gender.count <- df.train %>%
ggplot(aes(Sex)) + geom_bar(aes(fill = factor(Sex)), alpha = 0.4)
gender.count
age.count <- df.train %>%
ggplot(aes(Age)) + geom_histogram(bins = 20, fill = "blue", alpha = 0.4)
age.count
age.count <- df.train %>%
ggplot(aes(Age)) + geom_histogram(bins = 40, fill = "blue", alpha = 0.4)
age.count
SibSp.count <- df.train %>%
ggplot(aes(SibSp)) + geom_bar(fill = "red", alpha = 0.4)
SibSp.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4)
fare.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4, binwidth = 20)
fare.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4, binwidth = 40)
fare.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4, binwidth = 20)
fare.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4, binwidth = 10)
fare.count
fare.count <- df.train %>%
ggplot(aes(Fare)) + geom_histogram(fill = "green", color = "black",
alpha = 0.4, binwidth = 5)
fare.count
pl <- df.train %>%
ggplot(aes(Pclass, Age)) + geom_boxplot(aes(group = PClass),
fill = factor(Pclass), alpha = 0.4)
pl + scale_y_continuous(breaks = seq(min(0), max(80), by = 2))
pl <- df.train %>%
ggplot(aes(Pclass, Age)) + geom_boxplot(aes(group = PClass),
fill = factor(Pclass), alpha = 0.4)
pl <- df.train %>%
ggplot(aes(Pclass, Age)) + geom_boxplot(aes(group = PClass),
fill = factor(Pclass), alpha = 0.4)
pl <- df.train %>%
ggplot(aes(Pclass, Age)) + geom_boxplot(aes(group = Pclass),
fill = factor(Pclass), alpha = 0.4)
pl <- df.train %>%
ggplot(aes(Pclass, Age)) + geom_boxplot(aes(group = Pclass,
fill = factor(Pclass), alpha = 0.4))
pl + scale_y_continuous(breaks = seq(min(0), max(80), by = 2))
impute_age <- function(age,class){
out <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
out[i] <- 37
}else if (class[i] == 2){
out[i] <- 29
}else{
out[i] <- 24
}
}else{
out[i]<-age[i]
}
}
return(out)
}
if (class[i] == 1){
out[i] <- 37 # avg. age of 1st class
}else if (class[i] == 2){
out[i] <- 29 # avg. age of 2nd class
}else{
out[i] <- 24 # avg. age of 3rd class
}
impute_age <- function(age,class){
out <- age
for (i in 1:length(age)){ # for every obs. of variable "age", from 1st to last
if (is.na(age[i])){ # if age is missing
if (class[i] == 1){
out[i] <- 37 # avg. age of 1st class
}else if (class[i] == 2){
out[i] <- 29 # avg. age of 2nd class
}else{
out[i] <- 24 # avg. age of 3rd class
}
}else{
out[i]<-age[i]
}
}
return(out)
}
View(impute_age)
fixed.ages <- df.train$Age, df.train$Pclass %>%
impute_age()
fixed.ages <- impute_age(df.train$Age, df.train$Pclass)
head(fixed.ages)
df.train$Age <- fixed.ages # substituting OG "Age" variable to fixed.ages
head(df.train)
df.train %>%
missmap(main="Titanic Training Data - Missings Map", col=c("yellow", "black"),
legend=FALSE)
str(df.train)
head(df.train)
df.train <- df.train %>%
select(-PassengerId, -Name, -Ticket, -Cabin) # removing variables that won't
# be used
head(df.train)
str(df.train)
df.train$Survived <- factor(df.train$Survived)
df.train$Sex <- factor(df.train$Sex)
df.train$Pclass <- factor(df.train$Pclass)
df.train$Parch <- factor(df.train$Parch)
df.train$SibSp <- factor(df.train$SibSp)
df.train$Embarked <- factor(df.train$Embarked)
# setting every variable above as a factor
head(df)
# setting every variable above as a factor
head(df.train)
# setting every variable above as a factor
str(df.train)
log.model <- df.train %>%
glm(Survived ~ ., family = binomial(link = "logit"))
log.model <-   glm(formula = Survived ~ ., family = binomial(link = "logit"),
data = df.train)
summary(log.model)
library(caTools)
set.seed(101)
split <- df.train$Survived %>%
sample.split(SplitRatio = 0.7)
final.train <- df.train %>%
subset(split == T)
final.test <- df.train %>%
subset(split == F
final.log.model <- glm(formula = Survived ~ . , family = binomial(link='logit'),
data = final.train)
final.log.model <- glm(formula = Survived ~ . , family = binomial(link='logit'),
data = final.train)
summary(final.log.model)
fitted.probabilities <- final.log.model %>%
predict(newdata = final.test, type = "response")
fitted.probabilities <- predict(final.log.model, newdata = final.test,
type = "response")
final.test <- df.train %>%
subset(split == F) # 30% of data to test
fitted.probabilities <- predict(final.log.model, newdata = final.test,
type = "response")
help("predict")
fitted.probabilities
head(final.test)
help("ifelse")
# fitted.probabilities > 1, assign 1; otherwise, assign 0
misClasificError <- mean(fitted.results != final.test$Survived)
<- predict(final.log.model, newdata = final.test,
type = "response") # using original model w/
# test data (having used the train data to "train" the model)
fitted.results <- ifelse(fitted.probabilities > 0.5, 1, 0) # if value of
# fitted.probabilities > 1, assign 1; otherwise, assign 0
misClasificError <- mean(fitted.results != final.test$Survived)
print(paste("Accuracy is",1-misClasificError))
misClasificError
confusion.matrix <- table(final.test$Survived, fitted.probabilities > 0.5)
confusion.matrix
help("table")
final.test$Survived
fitted.probabilities
