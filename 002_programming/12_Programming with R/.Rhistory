x <- 0
while (x < 10){
print(paste0('x is: ' ,x))
x <- x + 1
if (x == 5){
print("x is now equal to 5! Breaking loop...")
break
}
}
# For Loops
v <- c(1,2,3)
for (variable in v) {
print(variable)
}
v <- c(1:5)
for (temp.var in v) {
# Execute some code
# for every temp.var in v (temp.var can be anything)
print(temp.var)
}
v <- c(1:5)
for (temp.var in v) {
print("Hello!")
}
v <- c(1:5)
for (temp.var in v) {
result <- temp.var + 1
print('The temp.var plus 1 is equal to: ')
print(result)
}
my.list <- list(c(1:3), mtcars, 12)
for (item in my.list) {
print(item) # "item" can be anything!
}
mat <- matrix(1:25, nrow=5)
print(mat)
x <- 0
while (x < 10){
print(paste0('x is: ' ,x))
x <- x + 1
if (x == 5){
print("x is now equal to 5! Breaking loop...")
break
}
}
# For Loops
v <- c(1,2,3)
for (variable in v) {
print(variable)
}
v <- c(1:5)
for (temp.var in v) {
# Execute some code
# for every temp.var in v (temp.var can be anything)
print(temp.var)
}
v <- c(1:5)
for (temp.var in v) {
print("Hello!")
}
v <- c(1:5)
for (temp.var in v) {
result <- temp.var + 1
print('The temp.var plus 1 is equal to: ')
print(result)
}
my.list <- list(c(1:3), mtcars, 12)
for (item in my.list) {
print(item) # "item" can be anything!
}
mat <- matrix(1:25, nrow=5)
print(mat)
for (num in mat) {
print(num)
}
1:nrow(mat)
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The element at row: ", row, 'and col: ', col, 'is', mat[row,col]))
}
print(num) # it prints by columns!
}
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The element at row: ", row, 'and col: ', col, 'is',
mat[row,col]))
}
}
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The selected row is: ", row))
print(paste("The element at row: ", row, 'and col: ', col, 'is',
mat[row,col]))
}
}
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The selected row is: ", row))
print(paste("The element at row: ", row, 'and col: ', col, 'is',
mat[row,col]))
}
}
### Functions
name_of_func <- function(input1, input2, input3 = 45){
# code execute
result <- input1 + input2
return(result)
}
hello <- function(){
print("Hello!")
}
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The selected row is: ", row))
print(paste("The element at row: ", row, 'and col: ', col, 'is',
mat[row,col]))
}
}
### Functions
name_of_func <- function(input1, input2, input3 = 45){
# code execute
result <- input1 + input2
return(result)
}
hello <- function(){
print("Hello!")
}
hello()
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The selected row is: ", row))
print(paste("The element at row: ", row, 'and col: ', col, 'is',
mat[row,col]))
}
}
### Functions
name_of_func <- function(input1, input2, input3 = 45){
# code execute
result <- input1 + input2
return(result)
}
hello <- function(){
print("Hello!")
}
hello()
hello
hello
hello
hello <- function(name){
print("Hello, ", name, "!")
}
hello
hello <- function(name){
print("Hello, ", name, "!")
}
hello("Sammy")
hello
hello <- function(name){
print("Hello, ", name, "!"))
}
hello("Sammy")
hello
hello <- function(name){
print("Hello, ", name)
}
hello("Sammy")
hello
hello <- function(name){
print(paste("Hello, ", name, "!"))
}
hello("Sammy")
hello <- function(name){
print(paste("Hello, ",name,"!"))
}
hello("Sammy")
hello("Sammy")
hello <- function(name){
print(paste("Hello,",name,"!"))
}
hello("Sammy")
hello()
hello() # error since there is no default!
hello <- function(name="Frank"){
# code which executes when the function is called
print(paste("Hello,",name,"!"))
}
hello()
hello("Sammy")
hello() # error since there is no default!
hello <- function(name="Frank"){
# code which executes when the function is called
print(paste("Hello,",name,"!"))
}
hello()
hello("Sammy")
add_num <- function(num1,num2){
print(num1 + num2)
}
add_num(4,5)
hello() # error since there is no default!
hello <- function(name="Frank"){
# code which executes when the function is called
print(paste("Hello,",name,"!"))
}
hello()
hello("Sammy")
add_num <- function(num1,num2){
print(num1 + num2)
}
add_num(4,5)
add_num <- function(num1,num2){
my.sum <- num1 + num2
return(my.sum)
}
result <- add_num(4,5)
result
print(result)
print(result)
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.result
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.result # not found; scope of this variable is limited within the times5
# function (a LOCAL variable!)
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.result # not found; scope of this variable is limited within the times5
# function (a LOCAL variable!)
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
stuff
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.result # not found; scope of this variable is limited within the times5
# function (a LOCAL variable!)
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
stuff
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num*5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.result # not found; scope of this variable is limited within the times5
# function (a LOCAL variable!)
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
stuff
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff)
stuff
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff) # this reproduces the reassigned/local variable version of "stuff"
stuff # this reproduces the global variable "stuff". therefore the function
# does NOT alter the global variable!
### Functions Training Exercise
hello_you <- function(name){
print(paste('Hello',name))
}
hello_you('Sam')
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff) # this reproduces the reassigned/local variable version of "stuff"
stuff # this reproduces the global variable "stuff". therefore the function
# does NOT alter the global variable!
### Functions Training Exercise
hello_you <- function(name){
print(paste('Hello',name))
}
hello_you('Sam')
hello_you2 <- function(name){
return(paste('Hello',name))
}
print(hello_you2('Sam'))
v <- "I'm a global variable!"
stuff <- "I'm global stuff!"
fun <- function(stuff){
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(stuff) # this reproduces the reassigned/local variable version of "stuff"
stuff # this reproduces the global variable "stuff". therefore the function
# does NOT alter the global variable!
### Functions Training Exercise
hello_you <- function(name){
print(paste('Hello',name))
}
hello_you('Sam')
hello_you2 <- function(name){
return(paste('Hello',name))
}
print(hello_you2('Sam'))
prod <- function(num1,num2){
print(num1 * num2)
}
prod(3,4)
num_check <- function(num,v){
for (item in v){
if (item == num){
return(TRUE)
}
}
return(FALSE)
}
num_check(2,c(1:3))
num_check <- function(int,vec){
for (i in vec){
if (i == int){
return(TRUE)
}
}
return(FALSE)
}
num_check(2,c(1:3))
num_check(2,c(1,4,5))
num_check(2,c(1,4,5))
num_count <- function(int,vec){
count = 0
for (i in vec){
if (i == int){
count = count + 1
}
}
return(count)
}
num_check(2,c(1,4,5))
num_count <- function(int,vec){
count = 0 # set initial count to 0
for (i in vec){
if (i == int){ # if there is an instance of the item in the vector
count = count + 1 # add 1 to the count
}
}
return(count)
}
num_check(2,c(1,4,5))
num_count <- function(int,vec){
count = 0 # set initial count to 0
for (i in vec){
if (i == int){ # if there is an instance of the item in the vector
count = count + 1 # add 1 to the count
}
}
return(count)
}
num_count(2,c(1:3))
num_count(2,c(1,1,2,2,2,3,3,3,4,4,4))
num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3))
num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3))
bar_count <- function(pack){
one_kilos = pack %% 5 # module of 5
five_kilos = (pack - one_kilos)/5
return(one_kilos + five_kilos)
}
bar_count(6)
bar_count(17)
bar_count(4)
bar_count(5)
help(append)
help(append) # add elements to a vector
help(append) # add elements to a vector
summer <- function(int.a, int.b, int.c){
out <- c(0) # creates a vector with one element, 0
if (int.a %% 3 != 0){ # if integer is NOT divisible by 3
out <- append(int.a,out) # add it to the vector above; otherwise it does NOT
# count to the sum!
}
if (int.b %% 3 != 0){
out <- append(int.b,out)
}
if (int.c %% 3 != 0){
out <- append(int.c,out)
}
return(sum(out))
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)รณ
summer(9,11,12)
prime_check <- function(int) {
if (int == 2) {
return(TRUE)
} else if (any(int %% 2:(int - 1) == 0)) {
return(FALSE)
} else {
return(TRUE)
}
}
prime_check(2)
prime_check(5)
prime_check(4)
prime_check(237)
prime_check(131)
prime_check <- function(int){
if (int == 2) {
return(TRUE)
}
for (i in 2:(int-1)){
if ((int %% i) == 0){
return(FALSE)
}
}
return(TRUE)
}
prime_check(2)
prime_check(5)
prime_check(4)
prime_check(237)
prime_check(131)
